2024-07-02 18:58:23,487{GMT}	INFO	[jepsen test runner] jepsen.core: Test version b3926f177e3be377c9798eaa8d8491acc2e57ecd (plus uncommitted changes)
2024-07-02 18:58:23,488{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w broadcast --bin /go/bin/broadcast --node-count 5 --time-limit 20 --rate 10 --nemesis partition
2024-07-02 18:58:23,645{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 5
 :availability nil
 :max-txn-length 4
 :concurrency 5
 :db
 #object[maelstrom.db$db$reify__16142
         "0x6ba6f4e7"
         "maelstrom.db$db$reify__16142@6ba6f4e7"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "broadcast"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x78fb4f7f" "2024-07-02T18:58:23.448Z"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x6a7c1725"
         "maelstrom.net$jepsen_net$reify__15251@6a7c1725"]
 :client
 #object[maelstrom.workload.broadcast$client$reify__16644
         "0x756476a3"
         "maelstrom.workload.broadcast$client$reify__16644@756476a3"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x65e4ee59"
         "java.util.concurrent.CyclicBarrier@65e4ee59"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 10.0
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x4746d52d"
         "jepsen.checker$compose$reify__11881@4746d52d"]
 :argv
 ("test"
  "-w"
  "broadcast"
  "--bin"
  "/go/bin/broadcast"
  "--node-count"
  "5"
  "--time-limit"
  "20"
  "--rate"
  "10"
  "--nemesis"
  "partition")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@4d0927df"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@1b0e81b3"]})
 :nodes ["n0" "n1" "n2" "n3" "n4"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "/go/bin/broadcast"
 :generator
 ((jepsen.generator.Synchronize
   {:gen (jepsen.generator.TimeLimit
          {:limit 20000000000,
           :cutoff nil,
           :gen (jepsen.generator.Any
                 {:gens [(jepsen.generator.OnThreads
                          {:f #{:nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x4936dca9"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@4936dca9"],
                           :gen (jepsen.generator.Stagger
                                 {:dt 20000000000,
                                  :next-time nil,
                                  :gen (jepsen.generator.FlipFlop
                                        {:gens [#object[jepsen.nemesis.combined$partition_package$start__16420
                                                        "0xd332ebc"
                                                        "jepsen.nemesis.combined$partition_package$start__16420@d332ebc"]
                                                ({:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 ...)],
                                         :i 0})})})
                         (jepsen.generator.OnThreads
                          {:f #jepsen.generator.context.AllBut{:element :nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x1f6865ca"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@1f6865ca"],
                           :gen (jepsen.generator.Stagger
                                 {:dt 200000000,
                                  :next-time nil,
                                  :gen (jepsen.generator.Mix
                                        {:i 1,
                                         :gens [({:f :broadcast, :value 0}
                                                 {:f :broadcast, :value 1}
                                                 {:f :broadcast, :value 2}
                                                 {:f :broadcast, :value 3}
                                                 {:f :broadcast, :value 4}
                                                 {:f :broadcast, :value 5}
                                                 {:f :broadcast, :value 6}
                                                 {:f :broadcast, :value 7}
                                                 ...)
                                                ({:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 ...)]})})})]})})})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #{:nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x6044311a"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@6044311a"],
           :gen ({:type :info, :f :stop-partition, :value nil})})})
  (jepsen.generator.Synchronize
   {:gen {:type :log, :value "Waiting for recovery..."}})
  (jepsen.generator.Synchronize {:gen {:type :sleep, :value 10}})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #jepsen.generator.context.AllBut{:element :nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x7416b560"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@7416b560"],
           :gen (jepsen.generator.EachThread
                 {:fresh-gen {:f :read, :final? true},
                  :context-filters #object[clojure.core$promise$reify__8591
                                           "0x53d782b0"
                                           {:status :pending, :val nil}],
                  :gens {}})})}))
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0xf4deb35"
         "maelstrom.net$jepsen_os$reify__15254@f4deb35"]
 :time-limit 20
 :workload :broadcast
 :consistency-models [:strict-serializable]
 :topology :grid}

2024-07-02 18:58:26,123{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2024-07-02 18:58:26,125{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2024-07-02 18:58:26,128{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2024-07-02 18:58:26,145{GMT}	INFO	[jepsen node n1] maelstrom.db: Setting up n1
2024-07-02 18:58:26,146{GMT}	INFO	[jepsen node n1] maelstrom.process: launching /go/bin/broadcast []
2024-07-02 18:58:26,147{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2024-07-02 18:58:26,148{GMT}	INFO	[jepsen node n4] maelstrom.db: Setting up n4
2024-07-02 18:58:26,147{GMT}	INFO	[jepsen node n3] maelstrom.db: Setting up n3
2024-07-02 18:58:26,148{GMT}	INFO	[jepsen node n2] maelstrom.db: Setting up n2
2024-07-02 18:58:26,152{GMT}	INFO	[jepsen node n3] maelstrom.process: launching /go/bin/broadcast []
2024-07-02 18:58:26,148{GMT}	INFO	[jepsen node n4] maelstrom.process: launching /go/bin/broadcast []
2024-07-02 18:58:26,152{GMT}	INFO	[jepsen node n2] maelstrom.process: launching /go/bin/broadcast []
2024-07-02 18:58:26,158{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2024-07-02 18:58:26,158{GMT}	INFO	[jepsen node n0] maelstrom.process: launching /go/bin/broadcast []
2024-07-02 18:58:26,226{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2024-07-02 18:58:26,293{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:read	nil
2024-07-02 18:58:26,297{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:ok	:read	nil
2024-07-02 18:58:26,300{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	:minority-third
2024-07-02 18:58:26,318{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	[:isolated {"n4" #{"n2" "n1" "n0" "n3"}, "n2" #{"n4"}, "n1" #{"n4"}, "n0" #{"n4"}, "n3" #{"n4"}}]
2024-07-02 18:58:26,426{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2024-07-02 18:58:26,427{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	nil
2024-07-02 18:58:26,577{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:invoke	:broadcast	0
2024-07-02 18:58:26,674{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:read	nil
2024-07-02 18:58:26,678{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:ok	:read	nil
2024-07-02 18:58:26,687{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	nil
2024-07-02 18:58:26,690{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:read	[0]
2024-07-02 18:58:26,697{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:broadcast	1
2024-07-02 18:58:26,799{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:read	nil
2024-07-02 18:58:26,802{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:ok	:read	nil
2024-07-02 18:58:26,954{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2024-07-02 18:58:26,956{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	nil
2024-07-02 18:58:27,094{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:broadcast	2
2024-07-02 18:58:27,116{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:broadcast	3
2024-07-02 18:58:27,299{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:broadcast	4
2024-07-02 18:58:29,708{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	nil
2024-07-02 18:58:29,710{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	:network-healed
2024-07-02 18:58:31,578{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:info	:broadcast	0	:net-timeout
2024-07-02 18:58:31,579{GMT}	INFO	[jepsen worker 3] jepsen.util: 8	:invoke	:broadcast	5
2024-07-02 18:58:31,697{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:info	:broadcast	1	:net-timeout
2024-07-02 18:58:31,721{GMT}	INFO	[jepsen worker 0] jepsen.util: 5	:invoke	:broadcast	6
2024-07-02 18:58:32,095{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:info	:broadcast	2	:net-timeout
2024-07-02 18:58:32,096{GMT}	INFO	[jepsen worker 4] jepsen.util: 9	:invoke	:read	nil
2024-07-02 18:58:32,128{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:info	:broadcast	3	:net-timeout
2024-07-02 18:58:32,131{GMT}	INFO	[jepsen worker 1] jepsen.util: 6	:invoke	:broadcast	7
2024-07-02 18:58:32,299{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:info	:broadcast	4	:net-timeout
2024-07-02 18:58:32,301{GMT}	INFO	[jepsen worker 2] jepsen.util: 7	:invoke	:broadcast	8
2024-07-02 18:58:35,332{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	:majorities-ring
2024-07-02 18:58:35,398{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	[:isolated {"n3" #{"n2" "n4"}, "n0" #{"n1" "n4"}, "n2" #{"n1" "n3"}, "n4" #{"n0" "n3"}, "n1" #{"n2" "n0"}}]
2024-07-02 18:58:36,579{GMT}	INFO	[jepsen worker 3] jepsen.util: 8	:info	:broadcast	5	:net-timeout
2024-07-02 18:58:36,581{GMT}	INFO	[jepsen worker 3] jepsen.util: 13	:invoke	:read	nil
2024-07-02 18:58:36,722{GMT}	INFO	[jepsen worker 0] jepsen.util: 5	:info	:broadcast	6	:net-timeout
2024-07-02 18:58:36,724{GMT}	INFO	[jepsen worker 0] jepsen.util: 10	:invoke	:broadcast	9
2024-07-02 18:58:37,097{GMT}	INFO	[jepsen worker 4] jepsen.util: 9	:fail	:read	nil	:net-timeout
2024-07-02 18:58:37,116{GMT}	INFO	[jepsen worker 4] jepsen.util: 9	:invoke	:read	nil
2024-07-02 18:58:37,132{GMT}	INFO	[jepsen worker 1] jepsen.util: 6	:info	:broadcast	7	:net-timeout
2024-07-02 18:58:37,136{GMT}	INFO	[jepsen worker 1] jepsen.util: 11	:invoke	:read	nil
2024-07-02 18:58:37,301{GMT}	INFO	[jepsen worker 2] jepsen.util: 7	:info	:broadcast	8	:net-timeout
2024-07-02 18:58:37,302{GMT}	INFO	[jepsen worker 2] jepsen.util: 12	:invoke	:broadcast	10
2024-07-02 18:58:41,587{GMT}	INFO	[jepsen worker 3] jepsen.util: 13	:fail	:read	nil	:net-timeout
2024-07-02 18:58:41,588{GMT}	INFO	[jepsen worker 3] jepsen.util: 13	:invoke	:read	nil
2024-07-02 18:58:41,724{GMT}	INFO	[jepsen worker 0] jepsen.util: 10	:info	:broadcast	9	:net-timeout
2024-07-02 18:58:41,729{GMT}	INFO	[jepsen worker 0] jepsen.util: 15	:invoke	:broadcast	11
2024-07-02 18:58:42,118{GMT}	INFO	[jepsen worker 4] jepsen.util: 9	:fail	:read	nil	:net-timeout
2024-07-02 18:58:42,125{GMT}	INFO	[jepsen worker 4] jepsen.util: 9	:invoke	:read	nil
2024-07-02 18:58:42,136{GMT}	INFO	[jepsen worker 1] jepsen.util: 11	:fail	:read	nil	:net-timeout
2024-07-02 18:58:42,189{GMT}	INFO	[jepsen worker 1] jepsen.util: 11	:invoke	:read	nil
2024-07-02 18:58:42,302{GMT}	INFO	[jepsen worker 2] jepsen.util: 12	:info	:broadcast	10	:net-timeout
2024-07-02 18:58:42,373{GMT}	INFO	[jepsen worker 2] jepsen.util: 17	:invoke	:read	nil
2024-07-02 18:58:42,992{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	nil
2024-07-02 18:58:42,993{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	:network-healed
2024-07-02 18:58:46,592{GMT}	INFO	[jepsen worker 3] jepsen.util: 13	:fail	:read	nil	:net-timeout
2024-07-02 18:58:46,730{GMT}	INFO	[jepsen worker 0] jepsen.util: 15	:info	:broadcast	11	:net-timeout
2024-07-02 18:58:47,126{GMT}	INFO	[jepsen worker 4] jepsen.util: 9	:fail	:read	nil	:net-timeout
2024-07-02 18:58:47,189{GMT}	INFO	[jepsen worker 1] jepsen.util: 11	:fail	:read	nil	:net-timeout
2024-07-02 18:58:47,373{GMT}	INFO	[jepsen worker 2] jepsen.util: 17	:fail	:read	nil	:net-timeout
2024-07-02 18:58:47,385{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	nil
2024-07-02 18:58:47,386{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	:network-healed
2024-07-02 18:58:47,387{GMT}	INFO	[jepsen worker 1] jepsen.generator.interpreter: Waiting for recovery...
2024-07-02 18:58:57,389{GMT}	INFO	[jepsen worker 3] jepsen.util: 13	:invoke	:read	nil
2024-07-02 18:58:57,390{GMT}	INFO	[jepsen worker 4] jepsen.util: 9	:invoke	:read	nil
2024-07-02 18:58:57,390{GMT}	INFO	[jepsen worker 1] jepsen.util: 11	:invoke	:read	nil
2024-07-02 18:58:57,391{GMT}	INFO	[jepsen worker 0] jepsen.util: 20	:invoke	:read	nil
2024-07-02 18:58:57,391{GMT}	INFO	[jepsen worker 2] jepsen.util: 17	:invoke	:read	nil
2024-07-02 18:59:02,390{GMT}	INFO	[jepsen worker 3] jepsen.util: 13	:fail	:read	nil	:net-timeout
2024-07-02 18:59:02,391{GMT}	INFO	[jepsen worker 4] jepsen.util: 9	:fail	:read	nil	:net-timeout
2024-07-02 18:59:02,391{GMT}	INFO	[jepsen worker 1] jepsen.util: 11	:fail	:read	nil	:net-timeout
2024-07-02 18:59:02,392{GMT}	INFO	[jepsen worker 0] jepsen.util: 20	:fail	:read	nil	:net-timeout
2024-07-02 18:59:02,392{GMT}	INFO	[jepsen worker 2] jepsen.util: 17	:fail	:read	nil	:net-timeout
2024-07-02 18:59:02,524{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2024-07-02 18:59:02,731{GMT}	INFO	[jepsen node n0] maelstrom.db: Tearing down n0
2024-07-02 18:59:02,733{GMT}	INFO	[jepsen node n1] maelstrom.db: Tearing down n1
2024-07-02 18:59:02,754{GMT}	INFO	[jepsen node n3] maelstrom.db: Tearing down n3
2024-07-02 18:59:02,756{GMT}	INFO	[jepsen node n2] maelstrom.db: Tearing down n2
2024-07-02 18:59:02,754{GMT}	INFO	[jepsen node n4] maelstrom.db: Tearing down n4
2024-07-02 18:59:03,402{GMT}	INFO	[jepsen node n0] maelstrom.net: Shutting down Maelstrom network
2024-07-02 18:59:03,416{GMT}	WARN	[jepsen test runner] jepsen.core: Test crashed!
clojure.lang.ExceptionInfo: Node n4 crashed with exit status 2. Before crashing, it wrote to STDOUT:

{"src":"n4","dest":"c1","body":{"in_reply_to":1,"type":"init_ok"}}
{"src":"n4","dest":"c9","body":{"in_reply_to":1,"type":"topology_ok"}}
{"src":"n4","dest":"c13","body":{"in_reply_to":1,"messages":null,"msg_id":1,"type":"read_ok"}}
{"src":"n4","dest":"n0","body":{"message":2,"type":"second-order-broadcast"}}

And to STDERR:

2024/07/02 18:58:26 Received {c1 n4 {"type":"init","node_id":"n4","node_ids":["n0","n1","n2","n3","n4"],"msg_id":1}}
2024/07/02 18:58:26 Node n4 initialized
2024/07/02 18:58:26 Sent {"src":"n4","dest":"c1","body":{"in_reply_to":1,"type":"init_ok"}}
2024/07/02 18:58:26 Received {c9 n4 {"type":"topology","topology":{"n0":["n3","n1"],"n1":["n4","n2","n0"],"n2":["n1"],"n3":["n0","n4"],"n4":["n1","n3"]},"msg_id":1}}
2024/07/02 18:58:26 Sent {"src":"n4","dest":"c9","body":{"in_reply_to":1,"type":"topology_ok"}}
2024/07/02 18:58:26 Received {c13 n4 {"type":"read","msg_id":1}}
2024/07/02 18:58:26 Sent {"src":"n4","dest":"c13","body":{"in_reply_to":1,"messages":null,"msg_id":1,"type":"read_ok"}}
2024/07/02 18:58:27 Received {c13 n4 {"type":"broadcast","message":2,"msg_id":2}}
2024/07/02 18:58:27 Sent {"src":"n4","dest":"n0","body":{"message":2,"type":"second-order-broadcast"}}
panic: interface conversion: interface {} is float64, not string

goroutine 21 [running]:
main.secondOrderbroadcastMessageToNeighborNodes(0xc0000a8000, 0xc0001004e0, 0xc000098150)
	/workspaces/Broadcast-System/broadcast-system/main.go:41 +0x49d
main.main.broadcast.func2({{0xc00009a380, 0x3}, {0xc00009a384, 0x2}, {0xc0000d4000, 0x2b, 0x30}})
	/workspaces/Broadcast-System/broadcast-system/main.go:25 +0xcb
github.com/jepsen-io/maelstrom/demo/go.(*Node).handleMessage(0xc0000a8000, 0x0?, {{0xc00009a380, 0x3}, {0xc00009a384, 0x2}, {0xc0000d4000, 0x2b, 0x30}})
	/go/pkg/mod/github.com/jepsen-io/maelstrom/demo/go@v0.0.0-20240408130303-0186f398f965/node.go:151 +0x8d
github.com/jepsen-io/maelstrom/demo/go.(*Node).Run.func2()
	/go/pkg/mod/github.com/jepsen-io/maelstrom/demo/go@v0.0.0-20240408130303-0186f398f965/node.go:129 +0x7d
created by github.com/jepsen-io/maelstrom/demo/go.(*Node).Run in goroutine 1
	/go/pkg/mod/github.com/jepsen-io/maelstrom/demo/go@v0.0.0-20240408130303-0186f398f965/node.go:127 +0x4f8

Full STDERR logs are available in /workspaces/Broadcast-System/broadcast-system/maelstrom/store/broadcast/20240702T185823.448Z/node-logs/n4.log
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$stop_node_BANG_.invokeStatic(process.clj:239)
	at maelstrom.process$stop_node_BANG_.invoke(process.clj:217)
	at maelstrom.db$db$reify__16142.teardown_BANG_(db.clj:75)
	at jepsen.db$fn__8744$G__8725__8748.invoke(db.clj:12)
	at jepsen.db$fn__8744$G__8724__8753.invoke(db.clj:12)
	at clojure.core$partial$fn__5908.invoke(core.clj:2642)
	at jepsen.control$on_nodes$fn__8599.invoke(control.clj:314)
	at clojure.lang.AFn.applyToHelper(AFn.java:154)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.applyTo(RestFn.java:142)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5818.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:408)
	at dom_top.core$real_pmap_helper$build_thread__211$fn__212.invoke(core.clj:163)
	at clojure.lang.AFn.applyToHelper(AFn.java:152)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.invoke(RestFn.java:425)
	at clojure.lang.AFn.applyToHelper(AFn.java:156)
	at clojure.lang.RestFn.applyTo(RestFn.java:132)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5818.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:397)
	at clojure.lang.AFn.run(AFn.java:22)
	at java.base/java.lang.Thread.run(Thread.java:829)
